include "pipelines/common.glsl"

vertex_shader [[
	
	layout (location = 0) out vec2 v_uv;
	
	void main()
	{
		gl_Position = fullscreenQuad(gl_VertexID, v_uv);
	}
]]


fragment_shader [[
	layout (location = 0) in vec2 v_uv;
	layout (location = 0, index = 0) out vec4 o_color0;
	layout (location = 0, index = 1) out vec4 o_color1;
	layout (binding=0) uniform sampler2D u_depth_buffer;
	layout (binding=1) uniform sampler2D u_shadowmap;
	layout (binding=2) uniform sampler2D u_inscatter;
	layout (binding=3) uniform sampler2D u_optical_depth;
	layout(std140, binding = 4) uniform Data {
		float u_bot;
		float u_top;
		float u_distribution_rayleigh;
		float u_distribution_mie;
		vec4 u_scatter_rayleigh;
		vec4 u_scatter_mie;
		vec4 u_absorb_mie;
		vec4 u_sunlight;
		vec4 u_resolution;
		vec4 u_fog_scattering;
		float u_fog_top;
		float u_fog_enabled;
		float u_godarys_enabled;
	};

	// mie - Schlick appoximation phase function of Henyey-Greenstein
	float miePhase(float g, float cos_theta)
	{
		float k = 1.55*g - 0.55*g*g*g; 
		float tmp = 1 + k * cos_theta;
		return (1 - k * k) / (4 * M_PI * tmp * tmp);
	}

	float rayleighPhase(float cos_theta)
	{
		return 3 / (16.0 * M_PI) * (1 + cos_theta * cos_theta);
	}

	float phase(float alpha, float g)
	{
		float a = 3.0*(1.0-g*g);
		float b = 2.0*(2.0+g*g);
		float c = 1.0+alpha*alpha;
		float d = pow(abs(1.0+g*g-2.0*g*alpha), 1.5);
		return (a/b)*(c/d);
	}

	float getFogDensity(float y) {
		return  y > u_fog_top ? 0 : 1;
	}

	void makeAscending(inout vec3 a, inout vec3 b) {
		if (a.y > b.y) {
			vec3 tmp = a;
			a = b;
			b = tmp;
		}
	}

	float opticalDepth(vec3 a, vec3 b)
	{
		makeAscending(a, b); // TODO remove and make sure argument are correct

		if (a.y > u_fog_top) return 0;
		if (b.y > u_fog_top) {
			vec3 dir = b - a;
			vec3 diry1 = dir / dir.y;
			b -= diry1 * (b.y - u_fog_top);
		}
		return length(a - b);
	}

	void main()
	{
		vec3 sunlight = u_sunlight.rgb * u_sunlight.a;
		float ndc_depth = texture(u_depth_buffer, v_uv).r;
		vec3 eyedir = getWorldNormal(v_uv);
		const float cos_theta = dot(eyedir, Global.light_dir.xyz);

		if (ndc_depth > 0) {
			float linear_depth = toLinearDepth(Global.inv_projection, ndc_depth);
			vec2 v = vec2(
				saturate(linear_depth / 50e3),
				max(0, eyedir.y)
			);
			vec4 insc = textureLod(u_inscatter, v, 0);
			o_color0.rgb = 
				vec3(insc.a) * miePhase(0.75, -cos_theta) * sunlight * u_scatter_mie.rgb
				+  insc.rgb * rayleighPhase(-cos_theta) * sunlight * u_scatter_rayleigh.rgb
				;
		}
		else {
			float spot = smoothstep(0.0, 1000.0, phase(cos_theta, 0.9995)) * 200;

			vec2 v = vec2(1);
			v.y = max(0, eyedir.y);
		
			const vec3 extinction_rayleigh = u_scatter_rayleigh.rgb;
			const vec3 extinction_mie = u_scatter_mie.rgb + u_absorb_mie.rgb;
		
			const vec3 cam_origin = vec3(0, u_bot, 0);
			vec3 p = cam_origin + Global.camera_world_pos.xyz;
			vec4 insc = textureLod(u_inscatter, v, 0);
			float p_height = saturate((length(p) - u_bot) / (u_top - u_bot));
			vec2 opt_depth = textureLod(u_optical_depth, vec2(abs(eyedir.y), p_height), 0).xy;
			o_color0.rgb = 
				vec3(insc.a) * miePhase(0.75, -cos_theta) * sunlight * u_scatter_mie.rgb
				+  insc.rgb * rayleighPhase(-cos_theta) * sunlight * u_scatter_rayleigh.rgb
				+ spot * exp(-opt_depth.x * extinction_rayleigh - opt_depth.y * extinction_mie) 
				;
		}
		o_color1 = vec4(1);
		o_color0.a = 1;

		if (u_fog_enabled > 0) {
			const vec3 fog_extinction = u_fog_scattering.rgb;
			float linear_depth = ndc_depth > 0 ? toLinearDepth(Global.inv_projection, ndc_depth) : 1e5;
			float dist = (linear_depth / dot(eyedir, Pass.view_dir.xyz));
			vec3 p0 = Global.camera_world_pos.xyz;
			vec3 p1 = Global.camera_world_pos.xyz + eyedir * dist;
			makeAscending(p0, p1);

			if (p0.y < u_fog_top) {
				if (p1.y > u_fog_top) {
					vec3 dir = p1 - p0;
					vec3 diry1 =  dir / (abs(dir.y) < 1e-5 ? 1e-5 : dir.y);
					p1 -= diry1 * (p1.y - u_fog_top);
				}

				float opt_depth = opticalDepth(p0, p1);
				vec3 fog_transmittance = exp(-opt_depth * fog_extinction);

				vec3 inscatter = vec3(0);
				{
					const int STEP_COUNT = u_godarys_enabled > 0 ? 128 : 8;
					float step_len = length(p1 - p0) / (STEP_COUNT + 1);
					float offset = rand(p0.xyz) * 2 - 1;
					for (float f = (0.5 + offset * 0.2) / STEP_COUNT; f < 1; f += 1.0 / (STEP_COUNT + 1)) {
						vec3 p = mix(p0, p1, f);
						float od = opticalDepth(p, p + Global.light_dir.xyz * 1e5); // TODO 1e5
						od += opticalDepth(p, Global.camera_world_pos.xyz);
						float shadow = u_godarys_enabled > 0 ? getShadowSimple(u_shadowmap, p - Global.camera_world_pos.xyz) : 1;
						inscatter += getFogDensity(p.y) * step_len * exp(-od * fog_extinction) * shadow;
					}
				}

				const float cos_theta = dot(eyedir, Global.light_dir.xyz);

				o_color1.rgb = fog_transmittance;
				if (Global.camera_world_pos.y < u_fog_top) {
					o_color0.rgb *= fog_transmittance;
				}

				o_color0.rgb += inscatter * u_fog_scattering.rgb * sunlight * miePhase(0.25, -cos_theta);
			}
		}
	}
]]